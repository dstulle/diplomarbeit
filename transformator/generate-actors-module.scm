#!../gambc-v4_6_9/bin/gsi-script -:s
(include "utils.scm")
(include "display-helper.scm")

(define actors (cdr (command-line)))

(define ClassNameActors (add-to-strings actors "" "Actor"))
(define ClassName-asString (add-to-strings actors "\"" "\""))
(define ClassName-typeCases (add-to-strings actors "type = \"" "\""))
(define ClassName-typeOfIDCases (add-to-strings actors "TypeOf(id) = \"" "\""))

; actions must have at least as much element as cases
(define (display-case offset cases actions . tail)
  (tab-feed cases tail offset)
  (cond
    ((null? cases) '())
    (else (if (eq? tail '())
              (display "CASE ")
              (display "  [] "))
          (display (car cases))
          (display " -> ")
          (if (> (string-length (car actions)) 42)
              (and (newline) (display (make-string (+ offset 5) #\space))))
          (display (car actions))
          (display-case offset (cdr cases) (cdr actions) 'tail))))

(define (display-actor-type-case head cases suffix)
(display head) (display " ==") (newline)
(display "   ") (display-case 3 cases (add-to-strings actors "" suffix)) (newline))

(display "---- MODULE Actors ----") (newline)
(display "\\****") (newline)
(display "\\* This file is automatically generated and must not be altered.") (newline)
(display "\\* If you want to change predicates of Actors please change the according") (newline)
(display "\\* *Actor MODULE") (newline)
(newline)
(display "EXTENDS ")
(display-comma-separated-block 8 ClassNameActors) (newline)
(newline)
(display "ActorTypes == {") (display-comma-separated-list ClassName-asString) (display "}") (newline)
(newline)
(display-actor-type-case "ActorEvents(type)" ClassName-typeCases "_Events")
(newline)
(display-actor-type-case "ActorOperations(type)" ClassName-typeCases "_Operations")
(newline)
(display "ActorActions(type) == ActorEvents(type) \\cup ActorOperations(type)") (newline)
(newline)
(display "----") (newline)
(newline)
(display-actor-type-case "PossibleState(type)" ClassName-typeCases "_PossibleState")
(newline)
(display-actor-type-case "LOCAL ActorsInvariantTS(type,state)" ClassName-typeCases "_Invariant(state)")
(newline)
(display "ActorsInvariant ==") (newline)
(display "   \\A type \\in ActorTypes :") (newline)
(display "      \\/ \\A id \\in ActiveActorIDsByType(type) :") (newline)
(display "         ActorsInvariantTS(type,StateOf(id))") (newline)
(newline)
(display "----") (newline)
(newline)
(display-actor-type-case "InitPredicate(type,state)" ClassName-typeCases "_InitPredicate(state)")
(newline)
(display-actor-type-case "Acquaintances(id)" ClassName-typeOfIDCases "_Acquaintances(StateOf(id))")
(newline)
(display-actor-type-case "PublicState(id)" ClassName-typeOfIDCases "_PublicState(StateOf(id))")
(newline)
(display "----") (newline)
(newline)
(display-actor-type-case "Action_Condition(kind, type, name, state, message)" ClassName-typeCases "_Action_Condition(kind, name, state, message)")
(newline)
(display-actor-type-case "Action_PossibleNewActors(kind, type, name, id, post, pre, message)" ClassName-typeCases "_Action_PossibleNewActors(kind, name, id, post, pre, message)")
(newline)
(display-actor-type-case "Action_PossibleNewMessages(kind, type, name, id, post, pre, message)" ClassName-typeCases "_Action_PossibleNewMessages(kind, name, id, post, pre, message)")
(newline)
(display-actor-type-case "Action_Predicate(type, kind, name, id, post, new, out, current, message)" ClassName-typeCases "_Action_Predicate(kind, name, id, post, new, out, current, message)")
(newline)
(display "====") (newline)
