---- MODULE ProducerActor ----
\****
\* This file is automatically generated from the producer.ral

EXTENDS ActorCore

----
\****
\* Constants

CONSTANTS ProducerActorConstant_limit

ASSUME /\ ProducerActorConstant_limit \in NatType


ASSUME ProducerActorConstant_limit > 0

----
\****
\* Variables

Producer_PossibleState ==
   [b : RefType,
    in : SeqType(NatType),
    out : SeqType(NatType)]

Producer_PossibleNewActors ==
   [type : {"Producer"},
    state : Producer_PossibleState,
    id : ActorIDs]

Producer_Invariant(state) ==
   /\ state \in Producer_PossibleState
   /\ TRUE

----
\****
\* Acquaintances

Producer_Acquaintances(state) == 
   {state.b}

----
\****
\* Public State

Producer_PublicState(state) == TRUE \* TODO

----
\****
\* Init Predicate

Producer_InitPredicate(state) ==
   /\ Len(state.in) = ProducerActorConstant_limit
   /\ state.out = << >>

----
\****
\* Events

Producer_Events ==
   {"produce"}

LOCAL Producer_EventProduce_Condition(state) ==
   Len(state.in) > 0

LOCAL Producer_EventProduce_PossibleNewActors(id, post, pre) ==
   {}

LOCAL Producer_EventProduce_PossibleNewMessages(id, post, pre) ==
   {[name |-> "write",
              destination |-> pre.b,
              body |-> [val |-> Head(pre.in),
                        prod |-> id],
              amount |-> 1]}

LOCAL Producer_EventProduce_Predicate(id, post, new, out, pre) ==
   /\ out = {[name |-> "write",
              destination |-> pre.b,
              body |-> [val |-> Head(pre.in),
                        prod |-> id],
              amount |-> 1]}
   /\ post.in = Tail(pre.in)
   /\ post.out = Append(pre.out, Head(pre.in))
   /\ post.b = pre.b
   /\ new = {}


----
LOCAL Producer_Event_Condition(name, state) ==
   CASE name = "produce" ->
      Producer_EventProduce_Condition(state)

LOCAL Producer_Event_PossibleNewActors(name, id, post, pre) ==
   CASE name = "produce" ->
      Producer_EventProduce_PossibleNewActors(id, post, pre)

LOCAL Producer_Event_PossibleNewMessages(name, id, post, pre) ==
   CASE name = "produce" ->
      Producer_EventProduce_PossibleNewMessages(id, post, pre)

LOCAL Producer_Event_Predicate(name, id, post, new, out, pre) ==
   CASE name = "produce" ->
      Producer_EventProduce_Predicate(id, post, new, out, pre)


----
\****
\* Operations

Producer_Operations ==
   {"none"}

LOCAL Producer_OperationNone_Condition(state, message) ==
   FALSE

LOCAL Producer_OperationNone_PossibleNewActors(id, post, pre, message) ==
   {}

LOCAL Producer_OperationNone_PossibleNewMessages(id, post, pre, message) ==
   {}

LOCAL Producer_OperationNone_Predicate(id, post, new, out, pre, message) ==
   FALSE


----
LOCAL Producer_Operation_Condition(name, state, message) ==
   CASE name = "none" ->
      Producer_OperationNone_Condition(state, message)

LOCAL Producer_Operation_PossibleNewActors(name, id, post, pre, message) ==
   CASE name = "none" ->
      Producer_OperationNone_PossibleNewActors(id, post, pre, message)

LOCAL Producer_Operation_PossibleNewMessages(name, id, post, pre, message) ==
   CASE name = "none" ->
      Producer_OperationNone_PossibleNewMessages(id, post, pre, message)

LOCAL Producer_Operation_Predicate(name, id, post, new, out, pre, message) ==
   CASE name = "none" ->
      Producer_OperationNone_Predicate(id, post, new, out, pre, message)


----

Producer_Action_Condition(kind, name, state, message) ==
   IF kind = "event"
   THEN
      Producer_Event_Condition(name, state)
   ELSE \* kind = "operation"
      Producer_Operation_Condition(name, state, message)

Producer_Action_PossibleNewActors(kind, name, id, post, pre, message) ==
   IF kind = "event"
   THEN
      Producer_Event_PossibleNewActors(name, id, post, pre)
   ELSE \* kind = "operation"
      Producer_Operation_PossibleNewActors(name, id, post, pre, message)

Producer_Action_PossibleNewMessages(kind, name, id, post, pre, message) ==
   IF kind = "event"
   THEN
      Producer_Event_PossibleNewMessages(name, id, post, pre)
   ELSE \* kind = "operation"
      Producer_Operation_PossibleNewMessages(name, id, post, pre, message)

Producer_Action_Predicate(kind, name, id, post, new, out, pre, message) ==
   IF kind = "event"
   THEN
      Producer_Event_Predicate(name, id, post, new, out, pre)
   ELSE \* kind = "operation"
      /\ name = message.name
      /\ Producer_Operation_Predicate(name, id, post, new, out, pre, message)

====
