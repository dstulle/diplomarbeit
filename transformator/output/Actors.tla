---- MODULE Actors ----
\****
\* This file is automatically generated and must not be altered.
\* If you want to change predicates of Actors please change the according
\* *Actor MODULE

EXTENDS EnvironmentActor,
        FactorialStepActor

ActorTypes == {"Environment", "FactorialStep"}

ActorEvents(type) ==
   CASE type = "Environment" -> Environment_Events
     [] type = "FactorialStep" -> FactorialStep_Events

ActorOperations(type) ==
   CASE type = "Environment" -> Environment_Operations
     [] type = "FactorialStep" -> FactorialStep_Operations

ActorActions(type) == ActorEvents(type) \cup ActorOperations(type)

----

PossibleState(type) ==
   CASE type = "Environment" -> Environment_PossibleState
     [] type = "FactorialStep" -> FactorialStep_PossibleState

LOCAL ActorsInvariantTS(type,state) ==
   CASE type = "Environment" -> Environment_Invariant(state)
     [] type = "FactorialStep" -> FactorialStep_Invariant(state)

ActorsInvariant ==
   \A type \in ActorTypes :
      \/ \A id \in ActiveActorIDsByType(type) :
         ActorsInvariantTS(type,StateOf(id))

----

InitPredicate(type,state) ==
   CASE type = "Environment" -> Environment_InitPredicate(state)
     [] type = "FactorialStep" -> FactorialStep_InitPredicate(state)

Acquaintances(id) ==
   CASE TypeOf(id) = "Environment" -> Environment_Acquaintances(StateOf(id))
     [] TypeOf(id) = "FactorialStep" -> FactorialStep_Acquaintances(StateOf(id))

----

Action_Condition(kind, type, name, state, message) ==
   CASE type = "Environment" -> 
        Environment_Action_Condition(kind, name, state, message)
     [] type = "FactorialStep" -> 
        FactorialStep_Action_Condition(kind, name, state, message)

Action_PossibleNewActors(kind, type, name, id, post, pre, message) ==
   CASE type = "Environment" -> 
        Environment_Action_PossibleNewActors(kind, name, id, post, pre, message)
     [] type = "FactorialStep" -> 
        FactorialStep_Action_PossibleNewActors(kind, name, id, post, pre, message)

Action_PossibleNewMessages(kind, type, name, id, post, pre, message) ==
   CASE type = "Environment" -> 
        Environment_Action_PossibleNewMessages(kind, name, id, post, pre, message)
     [] type = "FactorialStep" -> 
        FactorialStep_Action_PossibleNewMessages(kind, name, id, post, pre, message)

Action_Predicate(type, kind, name, id, post, new, out, current, message) ==
   CASE type = "Environment" -> 
        Environment_Action_Predicate(kind, name, id, post, new, out, current, message)
     [] type = "FactorialStep" -> 
        FactorialStep_Action_Predicate(kind, name, id, post, new, out, current, message)

====
