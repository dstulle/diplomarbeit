---- MODULE ConsumerActor ----
\****
\* This file is automatically generated from the consumer.ral

EXTENDS ActorCore

----
\****
\* Variables

Consumer_PossibleState ==
   [b : RefType,
    data : SeqType(NatType),
    waiting : BoolType]

Consumer_PossibleNewActors ==
   [type : {"Consumer"},
    state : Consumer_PossibleState,
    id : ActorIDs]

Consumer_Invariant(state) ==
   /\ state \in Consumer_PossibleState
   /\ TRUE

----
\****
\* Public State

Consumer_PublicState(state) == TRUE \* TODO

----
\****
\* Acquaintances

Consumer_Acquaintances(state) == 
   {state.b}

----
\****
\* Init Predicate

Consumer_InitPredicate(state) ==
   /\ state.data = << >>
   /\ \neg state.waiting

----
\****
\* Events

Consumer_Events ==
   {"consume"}

LOCAL Consumer_EventConsume_Condition(state) ==
   \neg state.waiting

LOCAL Consumer_EventConsume_PossibleNewActors(id, post, pre) ==
   {}

LOCAL Consumer_EventConsume_PossibleNewMessages(id, post, pre) ==
   {[name |-> "read",
              destination |-> pre.b,
              body |-> [cons |-> id],
              amount |-> 1]}

LOCAL Consumer_EventConsume_Predicate(id, post, new, out, pre) ==
   /\ out = {[name |-> "read",
              destination |-> pre.b,
              body |-> [cons |-> id],
              amount |-> 1]}
   /\ post.waiting
   /\ post.b = pre.b
   /\ post.data = pre.data
   /\ new = {}


----
LOCAL Consumer_Event_Condition(name, state) ==
   CASE name = "consume" ->
      Consumer_EventConsume_Condition(state)

LOCAL Consumer_Event_PossibleNewActors(name, id, post, pre) ==
   CASE name = "consume" ->
      Consumer_EventConsume_PossibleNewActors(id, post, pre)

LOCAL Consumer_Event_PossibleNewMessages(name, id, post, pre) ==
   CASE name = "consume" ->
      Consumer_EventConsume_PossibleNewMessages(id, post, pre)

LOCAL Consumer_Event_Predicate(name, id, post, new, out, pre) ==
   CASE name = "consume" ->
      Consumer_EventConsume_Predicate(id, post, new, out, pre)


----
\****
\* Operations

Consumer_Operations ==
   {"buffer-value"}

LOCAL Consumer_OperationBufferValue_Condition(state, message) ==
   /\ state.waiting
   /\ message.body.buf = state.b

LOCAL Consumer_OperationBufferValue_PossibleNewActors(id, post, pre, message) ==
   {}

LOCAL Consumer_OperationBufferValue_PossibleNewMessages(id, post, pre, message) ==
   {}

LOCAL Consumer_OperationBufferValue_Predicate(id, post, new, out, pre, message) ==
   /\ post.data = Append(pre.data, message.body.val)
   /\ \neg post.waiting
   /\ post.b = pre.b
   /\ out = {}
   /\ new = {}


----
LOCAL Consumer_Operation_Condition(name, state, message) ==
   CASE name = "buffer-value" ->
      Consumer_OperationBufferValue_Condition(state, message)

LOCAL Consumer_Operation_PossibleNewActors(name, id, post, pre, message) ==
   CASE name = "buffer-value" ->
      Consumer_OperationBufferValue_PossibleNewActors(id, post, pre, message)

LOCAL Consumer_Operation_PossibleNewMessages(name, id, post, pre, message) ==
   CASE name = "buffer-value" ->
      Consumer_OperationBufferValue_PossibleNewMessages(id, post, pre, message)

LOCAL Consumer_Operation_Predicate(name, id, post, new, out, pre, message) ==
   CASE name = "buffer-value" ->
      Consumer_OperationBufferValue_Predicate(id, post, new, out, pre, message)


LOCAL Consumer_OperationBufferIsEmpty_Condition(state, message) ==
   /\ state.waiting
   /\ message.body.buf = state.b

LOCAL Consumer_OperationBufferIsEmpty_PossibleNewActors(id, post, pre, message) ==
   {}

LOCAL Consumer_OperationBufferIsEmpty_PossibleNewMessages(id, post, pre, message) ==
   {}

LOCAL Consumer_OperationBufferIsEmpty_Predicate(id, post, new, out, pre, message) ==
   /\ \neg post.waiting
   /\ post.b = pre.b
   /\ post.data = pre.data
   /\ out = {}
   /\ new = {}

----

Consumer_Action_Condition(kind, name, state, message) ==
   IF kind = "event"
   THEN
      Consumer_Event_Condition(name, state)
   ELSE \* kind = "operation"
      Consumer_Operation_Condition(name, state, message)

Consumer_Action_PossibleNewActors(kind, name, id, post, pre, message) ==
   IF kind = "event"
   THEN
      Consumer_Event_PossibleNewActors(name, id, post, pre)
   ELSE \* kind = "operation"
      Consumer_Operation_PossibleNewActors(name, id, post, pre, message)

Consumer_Action_PossibleNewMessages(kind, name, id, post, pre, message) ==
   IF kind = "event"
   THEN
      Consumer_Event_PossibleNewMessages(name, id, post, pre)
   ELSE \* kind = "operation"
      Consumer_Operation_PossibleNewMessages(name, id, post, pre, message)

Consumer_Action_Predicate(kind, name, id, post, new, out, pre, message) ==
   IF kind = "event"
   THEN
      Consumer_Event_Predicate(name, id, post, new, out, pre)
   ELSE \* kind = "operation"
      /\ name = message.name
      /\ Consumer_Operation_Predicate(name, id, post, new, out, pre, message)

====
