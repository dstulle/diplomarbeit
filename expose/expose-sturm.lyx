#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass scrartcl
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_title "Expose - Übersetzen von ReActor-Spezifikationen in TLA"
\pdf_author "Daniel Sturm"
\pdf_keywords "ReActor, Scheme, TLA+, TLC, Model Checking"
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks true
\pdf_pdfborder true
\pdf_colorlinks true
\pdf_backref section
\pdf_pdfusetitle true
\papersize a4paper
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip bigskip
\quotes_language swedish
\papercolumns 1
\papersides 1
\paperpagestyle fancy
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
title{Expose - Infrastruktur zur Übersetzung von ReActor Spezifikationen}
\end_layout

\begin_layout Plain Layout


\backslash
author{Daniel Sturm, Informatik (Diplom), 221586}
\end_layout

\begin_layout Plain Layout


\backslash
maketitle
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Section
Einführung in das Themengebiet
\end_layout

\begin_layout Standard
Gemäß dem 
\lang ngerman
Mooreschen
\lang english
 Gesetz
\begin_inset CommandInset citation
LatexCommand cite
key "Moore"

\end_inset

 verdoppelt sich alle 1-2 Jahre die Leistungsfähigkeit der Prozessoren\SpecialChar \@.
 Lange
 geschah dies in Form einer Erhöhung der CPU-Taktfrequez\SpecialChar \@.
 In letzter Zeit
 geht der Trend in die Richtung, dass die Leistungsfähigkeit durch mehrere
 Kerne in CPUs bzw.
 Rechnern mit mehreren CPUs erhöht wird
\begin_inset CommandInset citation
LatexCommand cite
key "sutter2005"

\end_inset

\SpecialChar \@.

\end_layout

\begin_layout Standard
Diese Trendwende hat zur Folge, dass sich die Art und Weise wie Programme
 entwickelt werden darauf anpassen muss\SpecialChar \@.
 Programme bestehen nicht mehr aus
 strikt nacheinander auszuführenden Anweisungen sondern Teile des Programmcodes
 konnen und werden parrallel zueinander ausgeführt\SpecialChar \@.
 Bei der einer Parallelen
 ausführung ist die Reihenfolge der ausgeführten Anweisungen nicht vorhersehbar\SpecialChar \@.

\end_layout

\begin_layout Standard
Dadurch entstehen neue Probleme und 
\lang ngerman
Herausforderungen
\lang english
\SpecialChar \@.
 Z.B.
 muss der Zugriff auf gemeinsame Resourcen wie z.B.
 Bereiche im Speicher muss koordiniert werden, damit sich Prozesse nicht
 gegenseitig blockieren oder durch ungeschicktes timing Speicherinhalte
 verfälscht werden.
\end_layout

\begin_layout Subsection*
Aktor-Modell
\end_layout

\begin_layout Standard
Probleme, die durch die gemeinsame Nutzung von Speicherbereichen entstehen
 kann man entweder geschickt Synchronisieren oder gänzlich vermeiden.
 Ein Pattern zur Vermeidung des gleichzeitigen Zugriffs auf identische Speicherb
ereiche ist das Aktor-Objekt-Model
\begin_inset CommandInset citation
LatexCommand cite
key "agha1990a"

\end_inset

\SpecialChar \@.

\end_layout

\begin_layout Standard
Beim Aktor-Objekt-Model ist ein üblichens Objekt aus der objektorientierten
 Programmierung um einige Eigenschaften erweitert worden, die die Kommunikation
 zwischen Objekten regeln\SpecialChar \@.
 Diese erweiterten Objekte werden Aktoren genannt\SpecialChar \@.

\end_layout

\begin_layout Standard
Aktoren können unabhängig von einander agieren und aufeinander reagieren.
 Das Konzept eines Aktors binhaltet im allgemeinden zwei wichtige Teilaufgaben:
 Nachrichten entgegen nehmen und Nachrichten verarbeiten.
 Ein Aktor verarbeitet Nachrichten vollständig unabhängig von anderen Aktoren\SpecialChar \@.

\end_layout

\begin_layout Standard
Ein Aktor zeichnet sind daher durch Folgende Eigenschaften aus:
\end_layout

\begin_layout Description
Mailbox Jeder Aktor kann zu jeder Zeit nachrichten von anderen Aktoren und
 Objekten entgegen nehmen\SpecialChar \@.
 Alle diese Nachrichten landen zunächst in einer
 Queue (Warteschlange) und können anschließend eine nach der anderen vom
 Objekt bearbeitet werden\SpecialChar \@.

\end_layout

\begin_layout Description
Serielle
\begin_inset space ~
\end_inset

abarbeitung Code im Aktor wird immer nacheinander verarbeitet, zu keinem
 Zeitpunkt werden mehrere Stellen des Codes gleichzeitig ausgeführt, alles
 geschieht sequenziell\SpecialChar \@.

\end_layout

\begin_layout Description
Zustandsabhängkeit Abhängig vom eigenen Zustand kann der der Aktor entscheiden,
 was zu tun ist und transformiert sich selber dann ggf.
 zu einem anderen Aktor\SpecialChar \@.

\end_layout

\begin_layout Standard
ReActor
\begin_inset CommandInset citation
LatexCommand cite
key "burmeister2013a"

\end_inset

 ist eine deklarative Spezifikationssprache inspiriert von Scheme
\begin_inset CommandInset citation
LatexCommand cite
key "Scheme"

\end_inset

, die sich auf die Beschreibung oben genannter Aktoren spezialisiert hat\SpecialChar \@.

\end_layout

\begin_layout Section
Aufgabenbeschreibung
\end_layout

\begin_layout Standard
Bei der parallelen Programmierung ist neben dem Bedarf an neuen Denkweisen
 und angepassenten Algorithmen besonders wichtig mögliche Deadlocks und
 Race Conditions zu verhindern\SpecialChar \@.
 Hierbei ist kommt man mit herkömmlichem Unit-Test
en meistens nicht sehr weit\SpecialChar \@.
 Unit-Tests überprüfen die stichpunktartich die
 Funktionalität, daher kann es besonders im bereich der Parrallelen programmieru
ng passieren, das genau die Situationen die zu problemen führen nie geprüft\SpecialChar \@.

 Daher sind automatisierte formale Beweise mit einem Model Checker hier
 die bessere Wahl, weil bei dieser Methode ein allgemeingültiger beweis
 geführt wird, der alle möglichen situationen in Betracht zieht\SpecialChar \@.

\end_layout

\begin_layout Standard
Um diese Beweise mithilfe eines Model Checkers, wie TLC
\begin_inset CommandInset citation
LatexCommand cite
key "lamport2002a"

\end_inset

 für ReActor zu führen, muss ReActor in TLA+
\begin_inset CommandInset citation
LatexCommand cite
key "lamport2002a"

\end_inset

 übertragen (engl.
 code
\begin_inset space ~
\end_inset

transformation) werden\SpecialChar \@.
 Die Übertragung soll sich auf den Anteil von TLA+
 beschränken, der von TLC unterstützt wird.
\end_layout

\begin_layout Subsection*
Framework
\end_layout

\begin_layout Standard
Für die Aufgabe der Übertragung soll ein Framework Entwickelt werden, das
 zunächst nur exemplarisch einige Teilaspekte der Sprache übersetzt und
 später erweitert werden kann\SpecialChar \@.
 Um die Funktion des Frameworks soll durch
 eine TLC-gestützte Verifikation von einfachen Systemeigenschaften (z.B.
 Zustandsinvarianten für Aktor-Objekte) an zwei Entwurfsmusterspezifikationen
 (u.a.
 am Observer Pattern) demonstriert werden.
\end_layout

\begin_layout Standard
Das Framework soll im wesentlichen aus zwei Teilen bestehen, einem Fontend
 und einem Backend.
 Das Frontend dient dem einlesen der Eingabesprache und das Backend dient
 der Ausgabe in die Zielsprache.
\end_layout

\begin_layout Subsection*
Frontend
\end_layout

\begin_layout Standard
Die Eingabesprache ReActor ist als eine in Scheme/LISP eingebettete domänenspezi
fische Sprache (engl.
 internal or embedded DSL) zu verarbeiten.
 Die Grammatik der von der Infrastruktur unterstützten Sprachkonstrukte
 ist in Form einer EBNF-Grammatik zu definieren.
 Ein Frontend soll gemäß dieser Grammatik Eingaben in eine Zwischendarstellung
 (z.B.
 semantisch angereicherter abstrakter Syntaxbaum) überführen.
 Die Struktur der Zwischendarstellung und das Anreichern der selbigen sind
 zu erörtern.
 
\end_layout

\begin_layout Subsection*
Backend
\end_layout

\begin_layout Standard
Im Backend soll die Zwischendarstellung in ein TLA-Modell überführt werden.
 Eine für die Übersetzung notwendige Semantik, welche die Interaktion von
 Aktorobjekten in ReActor beschreibt, wird bereitgestellt.
 Die Semantik funktionaler und prädikatenlogischer Ausdrücke (Operationen,
 Aktivitäten, Initialisierungsschema etc.) entspricht im Wesentlichen der
 von TLA.
\end_layout

\begin_layout Standard
Die Spezifikation der in einem Schritt (Operation oder Aktivität) neu erzeugten
 Aktoren und gesendeten Nachrichten darf zum Zwecke der Vereinfachung als
 explizit angenommen werden.
 Die Syntax von Operationen und Aktivitäten ist hierfür anzupassen.
 Das erzeugte Modell soll durch Parameter die Möglichkeit bieten den Zustandsrau
m (Anzahl instanziierter Objekte, Länge der Nachrichtenqueues, endliche
 Datentypen) zu begrenzen.
 Semantische Schritte im System sind grundsätzlich als fair anzunehmen (engl.
 fair scheduling).
\end_layout

\begin_layout Subsection*
Modularität
\end_layout

\begin_layout Standard
Das Framework soll modular sein, also durch Austausch des Backends verschiedene
 Zielsprachen erzeugt werden können, wie z.B.
 eine auf LaTeX basierte graphische Representation von ReActor\SpecialChar \@.

\end_layout

\begin_layout Standard
Die Zwischendarstellung soll neben der Generierung von TLA-Modellen perspektivis
ch auch andere Backends unterstützen, z.B.
 für LaTeX.
 Bei der Gestaltung der Zwischendarstellung ist daher auf Generizität zu
 achten.
 Die Leistungsfähigkeit der Infrastruktur soll am Beispiel von zwei Entwurfsmust
ern nachgewiesen werden.
 Maßnahmen und Möglichkeiten zur Erweiterung sind zu skizzieren.
 Die Infrastruktur soll nach Möglichkeit in Scheme oder LISP umgesetzt werden.
\end_layout

\begin_layout Section
Lösungsansatz/Arbeitsbeschreibung
\end_layout

\begin_layout Standard
Um die Sprache ReActor in TLA+ zu übersetzen wird folgender Ansatz gewählt:
 Scheme wird durch Macros
\begin_inset CommandInset citation
LatexCommand cite
key "defmacro/lisp"

\end_inset

 zu ReActor erweitert\SpecialChar \@.
 In Scheme wird dann ein Parser implementiert, der
 aus dem Code TLA+ erzeugt\SpecialChar \@.
 Dafür ist folgendes notwendig:
\end_layout

\begin_layout Enumerate
Genaue Festsetzung der Syntax von ReActor.
\end_layout

\begin_layout Enumerate
Festlegung wie spezielle ReActor Konstrukte in TLA ausgedrückt werden sollen.
\end_layout

\begin_layout Enumerate
Implementierung des Parsers.
\end_layout

\begin_layout Section
Struktur der Arbeit
\end_layout

\begin_layout Standard
Dieser Entwurf ist derzeit noch rein spekulativ.
 Jede Ähnlichkeit mit der tatsächlichen Struktur ist noch rein zufällig.
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="14" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Kapitel
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Thema
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Motivation
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Problemstellung
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.2
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Verwandte Arbeiten
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Reflektion
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TLA
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ReActor
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.3
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Code Transformation
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Der Transformator
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3.1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Zwischenrepresentation
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3.2
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Frontend
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3.3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Backend
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Beispiele
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Erweiterbarkeit am Beispiel von LaTeX
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Section
Zeitplan
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="11" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ziel
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Termin
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Motivationsteil schreiben
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2013-03-01
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Reflektionsteil schreiben
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2013-03-29
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Zwischenrepresentation Entwickeln
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2013-04-12
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Frontend Entwickeln
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2013-04-26
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Backend Entwickeln
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2013-05-24
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Transformatorteil schreiben
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2013-06-07
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Beispielteil schreiben
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2013-06-21
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Erweiterbarkeitsteil schreiben
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2013-07-19
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
- Korrekturlesen -
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2013-09-13
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
- Abgeben -
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2013-09-30
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\start_of_appendix
\begin_inset Newpage clearpage
\end_inset


\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "../bibtex/general"
options "bibtotoc,unsrt"

\end_inset


\end_layout

\end_body
\end_document
