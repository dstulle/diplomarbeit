---- MODULE FactorialStepActor ----
\****
\* This file is automatically generated from the factorial-step.ral

EXTENDS ActorBase

----
\****
\* Variables

FactorialStep_PossibleState ==
   [initialized : BoolType,
    factor : NatType,
    requester : RefType,
    child : RefType,
    done : BoolType]

FactorialStep_PossibleNewActors ==
   [type : {"FactorialStep"},
    state : FactorialStep_PossibleState,
    id : ActorIDs]

FactorialStep_Invariant(state) ==
   /\ state \in FactorialStep_PossibleState
   /\ \/ state.initialized
      \/ \neg state.initialized

----
\****
\* Init Predicate

FactorialStep_InitPredicate(state) ==
   /\ state.initialized = FALSE
   /\ state.factor > 0
   /\ state.done = FALSE

----
\****
\* Acquaintances

FactorialStep_Acquaintances(state) == 
   IF \neg state.done THEN {state.child} ELSE {}

----
\****
\* Events

FactorialStep_Events ==
   {"init1", "init2"}

LOCAL FactorialStep_EventInit1_Condition(state) ==
   /\ \neg state.initialized
   /\ state.factor = 1

LOCAL FactorialStep_EventInit1_PossibleNewActors(id, post, pre) ==
   {}

LOCAL FactorialStep_EventInit1_PossibleNewMessages(id, post, pre) ==
   {[name |-> "result",
              destination |-> pre.requester,
              body |-> [value |-> 1],
              amount |-> 1]}

LOCAL FactorialStep_EventInit1_Predicate(id, post, new, out, pre) ==
   /\ new = {}
   /\ out = {[name |-> "result",
              destination |-> pre.requester,
              body |-> [value |-> 1],
              amount |-> 1]}
   /\ post.initialized = TRUE
   /\ post.factor = pre.factor
   /\ post.child = pre.child
   /\ post.requester = pre.requester
   /\ post.done = TRUE

LOCAL FactorialStep_EventInit2_Condition(state) ==
   /\ \neg state.initialized
   /\ state.factor > 1

LOCAL FactorialStep_EventInit2_PossibleNewActors(id, post, pre) ==
   {[type |-> "FactorialStep",
              id |-> NextFreeID(1),
              state |-> [requester |-> id,
                         factor |-> pre.factor-1,
                         initialized |-> FALSE,
                         child |-> AnyRef,
                         done |-> FALSE] ]}

LOCAL FactorialStep_EventInit2_PossibleNewMessages(id, post, pre) ==
   {}

LOCAL FactorialStep_EventInit2_Predicate(id, post, new, out, pre) ==
   /\ new = {[type |-> "FactorialStep",
              id |-> NextFreeID(1),
              state |-> [requester |-> id,
                         factor |-> pre.factor-1,
                         initialized |-> FALSE,
                         child |-> AnyRef,
                         done |-> FALSE] ]}
   /\ out = {}
   /\ post.initialized = TRUE
   /\ post.factor = pre.factor
   /\ post.child = NextFreeID(1)
   /\ post.requester = pre.requester
   /\ post.done = pre.done


----
LOCAL FactorialStep_Event_Condition(name, state) ==
   CASE name = "init1" ->
      FactorialStep_EventInit1_Condition(state)
     [] name = "init2" ->
      FactorialStep_EventInit2_Condition(state)

LOCAL FactorialStep_Event_PossibleNewActors(name, id, post, pre) ==
   CASE name = "init1" ->
      FactorialStep_EventInit1_PossibleNewActors(id, post, pre)
     [] name = "init2" ->
      FactorialStep_EventInit2_PossibleNewActors(id, post, pre)

LOCAL FactorialStep_Event_PossibleNewMessages(name, id, post, pre) ==
   CASE name = "init1" ->
      FactorialStep_EventInit1_PossibleNewMessages(id, post, pre)
     [] name = "init2" ->
      FactorialStep_EventInit2_PossibleNewMessages(id, post, pre)

LOCAL FactorialStep_Event_Predicate(name, id, post, new, out, pre) ==
   CASE name = "init1" ->
      FactorialStep_EventInit1_Predicate(id, post, new, out, pre)
     [] name = "init2" ->
      FactorialStep_EventInit2_Predicate(id, post, new, out, pre)


----
\****
\* Operations

FactorialStep_Operations ==
   {"result"}

LOCAL FactorialStep_OperationResult_Condition(state, message) ==
   state.initialized

LOCAL FactorialStep_OperationResult_PossibleNewActors(id, post, pre, message) ==
   {}

LOCAL FactorialStep_OperationResult_PossibleNewMessages(id, post, pre, message) ==
   {[name |-> "result",
              destination |-> pre.requester,
              body |-> [value |-> (message.body.value * pre.factor)],
              amount |-> 1]}

LOCAL FactorialStep_OperationResult_Predicate(id, post, new, out, pre, message) ==
   /\ new = {}
   /\ out = {[name |-> "result",
              destination |-> pre.requester,
              body |-> [value |-> (message.body.value * pre.factor)],
              amount |-> 1]}
   /\ post.initialized = pre.initialized
   /\ post.factor = pre.factor
   /\ post.requester = pre.requester
   /\ post.child = pre.child
   /\ post.done = TRUE


----
LOCAL FactorialStep_Operation_Condition(name, state, message) ==
   CASE name = "result" ->
      FactorialStep_OperationResult_Condition(state, message)

LOCAL FactorialStep_Operation_PossibleNewActors(name, id, post, pre, message) ==
   CASE name = "result" ->
      FactorialStep_OperationResult_PossibleNewActors(id, post, pre, message)

LOCAL FactorialStep_Operation_PossibleNewMessages(name, id, post, pre, message) ==
   CASE name = "result" ->
      FactorialStep_OperationResult_PossibleNewMessages(id, post, pre, message)

LOCAL FactorialStep_Operation_Predicate(name, id, post, new, out, pre, message) ==
   CASE name = "result" ->
      FactorialStep_OperationResult_Predicate(id, post, new, out, pre, message)


----

FactorialStep_Action_Condition(kind, name, state, message) ==
   IF kind = "event"
   THEN
      FactorialStep_Event_Condition(name, state)
   ELSE \* kind = "operation"
      FactorialStep_Operation_Condition(name, state, message)

FactorialStep_Action_PossibleNewActors(kind, name, id, post, pre, message) ==
   IF kind = "event"
   THEN
      FactorialStep_Event_PossibleNewActors(name, id, post, pre)
   ELSE \* kind = "operation"
      FactorialStep_Operation_PossibleNewActors(name, id, post, pre, message)

FactorialStep_Action_PossibleNewMessages(kind, name, id, post, pre, message) ==
   IF kind = "event"
   THEN
      FactorialStep_Event_PossibleNewMessages(name, id, post, pre)
   ELSE \* kind = "operation"
      FactorialStep_Operation_PossibleNewMessages(name, id, post, pre, message)

FactorialStep_Action_Predicate(kind, name, id, post, new, out, pre, message) ==
   IF kind = "event"
   THEN
      FactorialStep_Event_Predicate(name, id, post, new, out, pre)
   ELSE \* kind = "operation"
      /\ name = message.name
      /\ FactorialStep_Operation_Predicate(name, id, post, new, out, pre, message)

====
