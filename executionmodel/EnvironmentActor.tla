---- MODULE EnvironmentActor ----
\****
\* This file is automatically generated from the environment.ral

EXTENDS ActorEnvironment

----
(* Constants *)

CONSTANTS EnvironmentActorConstant_n

ASSUME /\ EnvironmentActorConstant_n \in NatType


ASSUME /\ EnvironmentActorConstant_n \in NatType
       /\ EnvironmentActorConstant_n > 0

----
(* Variables *)

Environment_PossibleState ==
   [initialized : BoolType,
    result : NatType,
    factorial : RefType,
    done : BoolType]

Environment_PossibleNewActors ==
   [type : {"Environment"},
    state : Environment_PossibleState,
    id : FreeIDs]

Environment_Invariant(state) ==
   /\ state \in Environment_PossibleState
   /\ \/ state.initialized
      \/ \neg state.initialized

----
(* Acquaintances *)

Environment_Acquaintances(state) == {} \* TODO

----
(* Public State *)

Environment_PublicState(state) == TRUE \* TODO

----
(* Init Predicate *)

Environment_InitPredicate(state) ==
   /\ state.initialized = FALSE
   /\ state.done = FALSE

----
(* Activities *)

Environment_Activities ==
   {"init"}

LOCAL Environment_ActivityInit_Condition(state) ==
   state.initialized = FALSE

LOCAL Environment_ActivityInit_Predicate(id, post, new, out, pre) ==
   /\ new = {[type |-> "FactorialStep",
              id |-> NextFreeID(1),
              state |-> [factor |-> EnvironmentActorConstant_n,
                         requester |-> id,
                         initialized |-> FALSE,
                         child |-> AnyRef,
                         done |-> FALSE] ]}
   /\ out = {}
   /\ post.initialized = TRUE
   /\ post.factorial = NextFreeID(1)
   /\ post.result = pre.result
   /\ post.done = pre.done


LOCAL Environment_Activity_Condition(name, state) ==
   CASE name = "init" ->
      Environment_ActivityInit_Condition(state)


LOCAL Environment_Activity_Predicate(name, id, post, new, out, pre) ==
   CASE name = "init" ->
      Environment_ActivityInit_Predicate(id, post, new, out, pre)


----
(* Messages *)

Environment_PossibleNewMessages ==
   [name : {"result"},
    destination : ActiveActorIDsByType("Environment"), 
    body : [value : NatType],
    amount : {1,2}]

----
(* Operations *)

Environment_Operations ==
   {"result"}

LOCAL Environment_OperationResult_Condition(state) ==
   TRUE

LOCAL Environment_OperationResult_Predicate(id, post, new, out, pre) ==
   /\ new = {}
   /\ out = {}
   /\ post.initialized = pre.initialized
   /\ post.result = NextMessageBody(id).value
   /\ post.factorial = pre.factorial
   /\ post.done = TRUE


LOCAL Environment_Operation_Condition(name, state) ==
   CASE name = "result" ->
      Environment_OperationResult_Condition(state)


LOCAL Environment_Operation_Predicate(name, id, post, new, out, pre) ==
   CASE name = "result" ->
      Environment_OperationResult_Predicate(id, post, new, out, pre)


----

Environment_Event_Condition(kind, name, state) ==
   IF kind = "activity"
   THEN
      Environment_Activity_Condition(name, state)
   ELSE \* kind = "operation"
      Environment_Operation_Condition(name, state)

Environment_Event_Predicate(kind, name, id, post, new, out, pre) ==
   IF kind = "activity"
   THEN
      Environment_Activity_Predicate(name, id, post, new, out, pre)
   ELSE \* kind = "operation"
      /\ name = NextMessageName(id)
      /\ Environment_Operation_Predicate(name, id, post, new, out, pre)

====
